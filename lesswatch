#!/usr/bin/env python
#coding=utf8
"""
====================================
 :mod:`lesswatch` less file watch and compile automatically
====================================
.. moduleauthor:: MoonChang Chae <mcchae@gmail.com>
.. note:: LGPL

Description
=====

less file watch and compile automatically


Work
===========


ChangeLog
--------

 * [2014/04/25]
	- Starting
"""
__author__ = ""
__date__ = "2014/04/25"
__version__ = "1.14.425"
__version_info__ = (1, 14, 425)
__license__ = "Future's NDA"

##########################################################################################
import os
import fnmatch
import sys
import time
import signal
import getopt
import glob
import datetime

##########################################################################################
def signal_handler(signal, frame):
	"""시그널 핸들러 (프로세스 종료)
	"""
	#print 'You pressed Ctrl+C!'
	sys.exit(0)

##########################################################################################
def get_files(root_path, pattern, is_recursive=True):
	if is_recursive:
		for path, dirs, files in os.walk(os.path.abspath(root_path)):
			for filename in fnmatch.filter(files, pattern):
				yield os.path.join(path, filename)
	else:
		for f in glob.glob(os.path.join(root_path, pattern)):
			yield f

##########################################################################################
def which(_file):
	for path in os.environ["PATH"].split(":"):
		if _file in os.listdir(path):
			#print "%s/%s" % (path, file)
			return True
	return False

##########################################################################################
class timer:
	""" 타이머 클래스

	:param int secs: 얼마만큼의 주기로 실행되는가 (디폴트 1초)

	.. note:: 주어진 시간(디폴트 1초) 안에 특정한 일을 수행한 경우 1초가 되도록 time.sleep()을
		하는데, 만약 그보다 더 걸리면 sleep을 하지 않고 그 다음 작업을 바로 수행함


	>>> import random
	>>> tse = timer()
	>>> for i in range(3):
	...   with tse:
	...     rnd = random.random()
	...     time.sleep(rnd)
	...     print('rnd=%f ===> %s' % (rnd, tse))
	...     if rnd <= 0 and tse.count != i: return False
	rnd=0.955333 ===> start_ts=1391318778.141574:end_ts=0.000000:done_ts=0.000000:sleep_ts=0.000000:delta=0.000000:count=0
	rnd=0.332995 ===> start_ts=1391318779.141698:end_ts=1391318779.097757:done_ts=0.956183:sleep_ts=0.043817:delta=0.000124:count=1
	rnd=0.676098 ===> start_ts=1391318780.142478:end_ts=1391318779.475601:done_ts=0.333903:sleep_ts=0.665973:delta=0.000904:count=2
	"""
	#=====================================================================================
	def __init__(self, secs = 1):
		""" secs is the total seconds todo something and sleep to meet this secs """
		self.secs = secs
		self.count = 0
		self.orig_ts = None
		self.start_ts = 0.0
		self.end_ts = 0.0
		self.done_ts = 0.0
		self.sleep_ts = 0.
		self.delta = None
		self.last_ts = None
	#=====================================================================================
	def start(self):
		"""처음 타이머 시작

		.. note:: with context의 __enter__ 시 호출됨
		"""
		self.start_ts = time.time()
		if self.orig_ts is None: self.orig_ts = self.start_ts
		self.delta = (self.start_ts - (self.secs * self.count)) - self.orig_ts
	#=====================================================================================
	def end(self):
		"""타이머 종료

		.. note:: with context의 __exit__ 시 호출됨
		"""
		self.end_ts = time.time()
		self.last_ts = self.start_ts
		self.count += 1
		self.sleep()
	#=====================================================================================
	def sleep(self):
		"""주기적으로 작업할 시간에 맞추어 sleep
		"""
		self.done_ts = self.end_ts - self.start_ts
		if self.done_ts >= self.secs:
			self.sleep_ts = 0.0
			return
		self.sleep_ts = self.secs - self.done_ts - self.delta
		if self.sleep_ts > 0:
			time.sleep(self.sleep_ts)
	#=====================================================================================
	def __repr__(self):
		s = 'start_ts=%f:end_ts=%f:done_ts=%f:sleep_ts=%f:delta=%f:count=%d' % (
			self.start_ts, self.end_ts, self.done_ts, self.sleep_ts, self.delta, self.count)
		return s
	#=====================================================================================
	def __enter__(self):
		self.start()
	#=====================================================================================
	def __exit__(self, type, value, traceback):
		self.end()

##########################################################################################
class LessWatch:
	#=====================================================================================
	def __init__(self, opt, root_path):
		self.opt = opt
		self.root_path = root_path
	#=====================================================================================
	def checkLessc(self):
		if not which('lessc'):
			raise RuntimeError("Cannot find lessc compiler. Please check it!")
	#=====================================================================================
	def do(self):
		self.checkLessc()
		tse = timer(self.opt['period'])
		while True:
			with tse:
				lesses = [ f for f in get_files(self.root_path, "*.less",
				                                is_recursive=not self.opt['no_recursive']) ]
				self.checkLesses(lesses)
	#=====================================================================================
	@staticmethod
	def _print(msg):
		ntsstr = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
		print '[%s] %s' % (ntsstr, msg)
	#=====================================================================================
	def _verbose(self, msg):
		if not self.opt['verbose']: return
		self._print(msg)
	#=====================================================================================
	def checkLesses(self, lesses):
		self._verbose("%s less files to check at folder <%s>..." %
		              (len(lesses), self.root_path))
		cnt_compile = 0
		for less in lesses:
			do_compile = False
			lm_ts = os.path.getmtime(less)
			css = '%s.css' % less[:-5]
			if not os.path.exists(css):
				do_compile = True
			else:
				cm_ts = os.path.getmtime(css)
				if lm_ts > cm_ts:
					do_compile = True
			if do_compile:
				self._print("Less compile: %s" % less)
				os.system('lessc "%s" "%s"' % (less, css))
				cnt_compile += 1
		if cnt_compile <= 0:
			self._verbose("No less file to changed.")


##########################################################################################
def usage(msg = None):
	"""본 모듈의 사용방법 출력
	"""
	if msg:
		sys.stderr.write('Error: %s!!!\n' % msg)
	prog = sys.argv[0]
	sys.stderr.write('''
Usage: %s [options] top_root
	watch less file recursively and compile if less file changed
	options:
	-h, --help : print this help message
	-p | --period second : every watch period (default is 3 second)
	-n | --no_recursive : do not check subfolders resively
	-v --verbose: verbose mode set
''' % prog)
	sys.exit(1)

##########################################################################################
def Main():
	"""-m 혹은 python 인터프리터로 직접 호출된 경우 본 함수 호출됨
	"""
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hp:nv",
								   ["help", "period", 'no_recursive', 'verbose'])
	except getopt.GetoptError, e:
		usage(str(e))
	Options = { 'period':3, 'verbose':False, 'no_recursive':False }
	for o, a in opts:
		if o in ("-h", "--help"):
			usage()
		elif o in ("-p", "--period"):
			Options['period'] = int(a)
		elif o in ("-n", "--no_recursive"):
			Options['no_recursive'] = True
		elif o in ("-v", "--verbose"):
			Options['verbose'] = True
	if len(args) != 1:
		usage('Please top_root to watch ')
	try:
		lw = LessWatch(Options, args[0])
		lw.do()
	except Exception as e:
		usage(str(e))

##########################################################################################
if __name__ == '__main__':
	signal.signal(signal.SIGINT, signal_handler)
	Main()

